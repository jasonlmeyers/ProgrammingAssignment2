## Together these two functions create a matrix and find its inverse. When the inverse is already
### available, the functions will retrieve the cached value of the inverse

## The makeCacheMatrix function creates a special matrix object that can cache its inverse

  makeCacheMatrix <- function(x = matrix()) {
    m<-NULL
    set<-function(y){
      x<<-y
      m<<-NULL
    }
    get<-function() x
    setmatrix<-function(solve) m<<- solve  ### 'solve' returns inverse of square matrix#####
    getmatrix<-function() m
    list(set=set, get=get,
         setmatrix=setmatrix,
         matrix <- x$get() )
  }


## The cacheSolve function computes the inverse of the special "matrix" returned by makeCacheMatrix above. 
##  If the inverse has already been calculated (and the matrix has not changed), 
##  then the cachesolve should retrieve the inverse from the cache.

  cacheSolve <- function(x=matrix(), ...) {
    m<-x$getmatrix()
    if(!is.null(m)){
      message("getting cached data")  ### gets cached value and doesn't recalculate if available###
      return(m)
    }
    matrix<-x$get()
    m<-solve(matrix, ...)
    x$setmatrix(m)
    m
  }






